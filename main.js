!function(){"use strict";class e{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}clear(){this._container.innerHTML=""}appendItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class t{constructor(e){let{popupSelector:t,popupOpenedClass:r,closeButtonSelector:s}=e;this._popupWindow=document.querySelector(t),this._closeButton=this._popupWindow.querySelector(s),this._popupOpenedClass=r}open(){this._popupWindow.classList.add(this._popupOpenedClass),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupWindow.classList.remove(this._popupOpenedClass),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupWindow.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class r extends t{constructor(e,t,r){super(e),this._submitHandler=r,this._popupForm=this._popupWindow.querySelector(t),this._formInputs=Array.from(this._popupForm.querySelectorAll("input"))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{this._submitHandler(e,this._getInputValues())}))}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._formInputs.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._popupForm.reset()}}class s{constructor(e,t,r,s,n,o){this._cardSelector=t,this._handleImageClick=r,this._confirmDelete=s,this._callApiDelete=n,this._callApiLike=o,this._cardElement=this._cardSelector.querySelector(".card").cloneNode(!0),this._cardElementCaption=this._cardElement.querySelector(".card__caption"),this._cardElementCaption.textContent=e.name,this._likeElement=this._cardElement.querySelector(".card__button-heart"),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=e.link,this._cardImageElement.alt=e.name,this._cardImageElement.id=e._id,e.isLiked&&this._likeElement.classList.add("card__button-heart_active")}_handleLikeCard=e=>{e.target.classList.toggle("card__button-heart_active"),this._callApiLike(this._cardImageElement.id,e.target.classList.contains("card__button-heart_active"))};_handleDeleteCard=()=>{this._confirmDelete(this)};deleteCard(){this._removeEventListeners(),this._cardElement.remove(),this._callApiDelete(this._cardImageElement.id)}_callHandleImageClick=()=>{this._handleImageClick(this)};_setEventListeners(){this._cardElement.querySelector(".card__button-heart").addEventListener("click",this._handleLikeCard),this._cardElement.querySelector(".card__button-delete").addEventListener("click",this._handleDeleteCard),this._cardImageElement.addEventListener("click",this._callHandleImageClick)}_removeEventListeners(){this._cardElement.querySelector(".card__button-heart").removeEventListener("click",this._handleLikeCard),this._cardElement.querySelector(".card__button-delete").removeEventListener("click",this._handleDeleteCard),this._cardImageElement.removeEventListener("click",this._callHandleImageClick)}getCardElement(){return this._setEventListeners(),this._cardElement}getCardName(){return this._cardElementCaption.textContent}getCardAltInfo(){return this._cardImageElement.alt}getCardLink(){return this._cardImageElement.src}}class n{constructor(e,t){let{inputSelector:r,submitButtonSelector:s,inputErrorClass:n,errorClass:o}=e;this._inputSelector=r,this._submitButtonSelector=s,this._inputErrorClass=n,this._errorClass=o,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`.${e.name}-error`);e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._formElement.querySelector(`.${e.name}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setSubmitButtonState(){this._hasInvalidInput()?this.disableSubmitButton():this._buttonElement.disabled=!1}_setEventListeners(){this._setSubmitButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._setSubmitButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}disableSubmitButton(){this._buttonElement.disabled=!0}resetValidation(){const e=new Event("input");this._inputList.forEach((t=>{t.dispatchEvent(e)}))}}const o=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],a="#edit-profile-modal",i=document.querySelector(a).querySelector(".modal__submit-btn"),l="#edit-profile-url-modal",c=document.querySelector(l).querySelector(".modal__submit-btn"),d="#add-card-modal",u=document.querySelector(d).querySelector(".modal__submit-btn"),m={},h={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},p="modal_opened",_=".modal__form",E=document.querySelector(".modal__input_profile-name").name,f=document.querySelector(".modal__input_profile-description").name,v=document.querySelector(".modal__input_profile-url").name,g=document.querySelector(".modal__input_place-name").name,S=document.querySelector(".modal__input_place-pic-url").name,b=(document.forms["add-card-form"],document.querySelector(".profile__edit-button")),C=document.querySelector(".profile__image"),y=document.querySelector(".profile__add-card-button"),L=document.querySelector("#card").content,I=".modal__close-btn",k=document.querySelector(".header__reset-btn");function w(e){return new s(e,L,q,T,D,$).getCardElement()}function q(e){N.open({link:e.getCardLink(),altInfo:e.getCardAltInfo(),name:e.getCardName()})}document.querySelector(".header__get-btn");const U=new class{constructor(e){let{userNameSelector:t,userDescriptionSelector:r,userAvatarSelector:s}=e;this._userName=document.querySelector(t),this._userDescription=document.querySelector(r),this._userAvatar=document.querySelector(s)}getUserInfo(){const e={};return e.name=this._userName.textContent,e.description=this._userDescription.textContent,e}getUserAvatar(){return this._currentAvatar}setUserInfo(e){let{name:t,description:r}=e;this._userName.textContent=t,this._userDescription.textContent=r}setUserAvatar(e){this._userAvatar.src=e,this._currentAvatar=e}}({userNameSelector:".profile__title",userDescriptionSelector:".profile__description",userAvatarSelector:".profile__image"}),A=new r({popupSelector:a,popupOpenedClass:p,closeButtonSelector:I},_,(function(e,t){i.textContent="Saving...",e.preventDefault();const r={name:`${t[E]}`,description:`${t[f]}`};U.setUserInfo(r),B.setUserInfo(r).then((e=>{U.setUserInfo(r)})).catch((e=>{alert(e)})).finally((()=>{A.close()}))}));A.setEventListeners(),b.addEventListener("click",(()=>{const e={},{name:t,description:r}=U.getUserInfo();e[E]=t,e[f]=r,A.setInputValues(e),m["edit-profile-form"].resetValidation(),m["edit-profile-form"].disableSubmitButton(),i.textContent="Save",A.open()}));const j=new r({popupSelector:l,popupOpenedClass:p,closeButtonSelector:I},_,(function(e,t){c.textContent="Saving...",e.preventDefault(),B.setUserAvatar(t[v]).then((e=>{console.log(e),U.setUserAvatar(t[v])})).catch((e=>{alert(e)})).finally((()=>{j.close()}))}));function D(e){B.deleteCard(e).then((e=>{console.log(e)}))}function $(e,t){console.log(B.setCardLike(e,t))}j.setEventListeners(),C.addEventListener("click",(()=>{const e={};e[v]=U.getUserAvatar(),j.setInputValues(e),m["edit-profile-url-form"].resetValidation(),m["edit-profile-url-form"].disableSubmitButton(),c.textContent="Save",j.open()})),k.addEventListener("click",(function(){console.log("Cards delete"),B.deleteAllCards().then((()=>{B.writeCards(o)}))}));const B=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r,console.log(this._baseUrl,this._headers)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"GET"}).then((e=>e.ok?e.json():Promise.reject(`Error loading cards from server. Error number: ${e.status}`))).catch((e=>{console.log(e)}))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"GET"}).then((e=>e.ok?e.json():Promise.reject(`Error getting user info from server. Error number: ${e.status}`))).catch((e=>{console.log(e)}))}setUserInfo(e){let{name:t,description:r}=e;return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error setting user info from server. Error number: ${e.status}`))).then((e=>(console.log("User info updated."),e)))}setUserAvatar(e){return console.log(e),fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error updataing user avatar. Error number: ${e.status}. Possibly you typed in wrong URL.`))).then((e=>(console.log("User avatar updated successfully"),e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then((t=>t.ok?(console.log(`Card with ID: ${e} successfully deleted from server`),t.json()):Promise.reject(`Error deleteng card from server. Error number: ${t.status}`))).catch((e=>{console.log(e)}))}deleteAllCards(){const e=[];return this.getInitialCards().then((t=>{t.forEach((t=>{e.push(this.deleteCard(t._id))}))})),Promise.all(e)}writeCard(e){return console.log(e),fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error posting card to server. Error number: ${e.status}. Possibly you typed in wrong URL.`))).then((e=>(console.log(`Card with ID: ${e._id} successfully posted to server`),e)))}writeCards(e){const t=[];return e.forEach((e=>{t.push(this.writeCard(e))})),Promise.all(t).then((()=>`Successfully posted ${t.length} cards.`))}setCardLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:t?"PUT":"DELETE"}).then((e=>(console.log(e),e.ok?e.json():Promise.reject(`Error writing like. Error number: ${e.status}`)))).then((()=>{console.log("Like set with success")})).catch((e=>{console.log(e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"16b2631d-863b-4a4a-821d-14e3c93f8b71","Content-Type":"application/json"}}),x=[B.getInitialCards(),B.getUserInfo()];let P;Promise.all(x).then((t=>{console.log(t),P=new e({items:t[0],renderer:e=>{const t=w(e);P.appendItem(t)}},".elements__cards"),P.renderItems(),U.setUserInfo({name:t[1].name,description:t[1].about}),U.setUserAvatar(t[1].avatar)})).catch((e=>{allert(e)}));const V=new r({popupSelector:d,popupOpenedClass:p,closeButtonSelector:I},_,(function(e,t){u.textContent="Saving...",e.preventDefault(),B.writeCard({name:t[g],link:t[S]}).then((e=>{console.log(e);const t=w(e);P.prependItem(t)})).catch((e=>{alert(e)})),V.close()}));V.setEventListeners(),y.addEventListener("click",(()=>{m["add-card-form"].disableSubmitButton(),u.textContent="Save",V.open()}));const O=new class extends t{constructor(e,t,r){super(e),this._submitHandler=r,this._popupForm=this._popupWindow.querySelector(t)}open(e){this._cardToDelete=e,super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{this._submitHandler(e,this._cardToDelete)}))}}({popupSelector:"#confirm-delete-modal",popupOpenedClass:p,closeButtonSelector:I},_,(function(e,t){e.preventDefault(),t.deleteCard(),O.close()}));function T(e){O.open(e)}O.setEventListeners();const N=new class extends t{constructor(e,t,r){super(e),this._picture=this._popupWindow.querySelector(t),this._caption=this._popupWindow.querySelector(r)}open(e){let{link:t,altInfo:r,name:s}=e;super.open(),this._picture.src=t,this._picture.alt=r,this._caption.textContent=s}}({popupSelector:"#show-pic-modal",popupOpenedClass:p,closeButtonSelector:I},".modal__picture",".modal__picture-caption");var H;N.setEventListeners(),H=h,Array.from(document.querySelectorAll(H.formSelector)).forEach((e=>{const t=new n(h,e),r=e.getAttribute("name");m[r]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,