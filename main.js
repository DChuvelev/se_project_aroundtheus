!function(){"use strict";class e{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}clear(){this._container.innerHTML=""}appendItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class t{constructor(e){let{popupSelector:t,popupOpenedClass:r,closeButtonSelector:s}=e;this._popupWindow=document.querySelector(t),this._closeButton=this._popupWindow.querySelector(s),this._popupOpenedClass=r}open(){this._popupWindow.classList.add(this._popupOpenedClass),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupWindow.classList.remove(this._popupOpenedClass),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupWindow.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class r extends t{constructor(e,t,r){super(e),this._submitHandler=r,this._popupForm=this._popupWindow.querySelector(t),this._formInputs=Array.from(this._popupForm.querySelectorAll("input")),this._submitBtn=this._popupForm.querySelector(".modal__submit-btn"),this._submitBtnOrigText=this._submitBtn.textContent}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{this._submitHandler(e,this._getInputValues(),this)}))}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._formInputs.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._popupForm.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnOrigText}}class s{constructor(e,t,r,s,n,i){this._cardSelector=t,this._handleImageClick=r,this._confirmDelete=s,this._callApiDelete=n,this._callApiLike=i,this._cardElement=this._cardSelector.querySelector(".card").cloneNode(!0),this._cardElementCaption=this._cardElement.querySelector(".card__caption"),this._cardElementCaption.textContent=e.name,this._likeElement=this._cardElement.querySelector(".card__button-heart"),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=e.link,this._cardImageElement.alt=e.name,this._cardImageElement.id=e._id,e.isLiked&&this._likeElement.classList.add("card__button-heart_active")}_handleLikeCard=e=>{this._callApiLike(this._cardImageElement.id,!e.target.classList.contains("card__button-heart_active")).then((t=>(e.target.classList.toggle("card__button-heart_active"),t))).catch((e=>{alert(e)}))};_handleDeleteCard=()=>{this._confirmDelete(this)};deleteCard(){return this._callApiDelete(this._cardImageElement.id).then((e=>(this._removeEventListeners(),this._cardElement.remove(),e)))}_callHandleImageClick=()=>{this._handleImageClick(this)};_setEventListeners(){this._cardElement.querySelector(".card__button-heart").addEventListener("click",this._handleLikeCard),this._cardElement.querySelector(".card__button-delete").addEventListener("click",this._handleDeleteCard),this._cardImageElement.addEventListener("click",this._callHandleImageClick)}_removeEventListeners(){this._cardElement.querySelector(".card__button-heart").removeEventListener("click",this._handleLikeCard),this._cardElement.querySelector(".card__button-delete").removeEventListener("click",this._handleDeleteCard),this._cardImageElement.removeEventListener("click",this._callHandleImageClick)}getCardElement(){return this._setEventListeners(),this._cardElement}getCardName(){return this._cardElementCaption.textContent}getCardAltInfo(){return this._cardImageElement.alt}getCardLink(){return this._cardImageElement.src}}class n{constructor(e,t){let{inputSelector:r,submitButtonSelector:s,inputErrorClass:n,errorClass:i}=e;this._inputSelector=r,this._submitButtonSelector=s,this._inputErrorClass=n,this._errorClass=i,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`.${e.name}-error`);e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._formElement.querySelector(`.${e.name}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setSubmitButtonState(){this._hasInvalidInput()?this.disableSubmitButton():this._buttonElement.disabled=!1}_setEventListeners(){this._setSubmitButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._setSubmitButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}disableSubmitButton(){this._buttonElement.disabled=!0}resetValidation(){const e=new Event("input");this._inputList.forEach((t=>{t.dispatchEvent(e)}))}}const i=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],o={},a={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},l="modal_opened",c=".modal__form",d=document.querySelector(".modal__input_profile-name").name,u=document.querySelector(".modal__input_profile-description").name,p=document.querySelector(".modal__input_profile-url").name,h=document.querySelector(".modal__input_place-name").name,m=document.querySelector(".modal__input_place-pic-url").name,_=(document.forms["add-card-form"],document.querySelector(".profile__edit-button")),E=document.querySelector(".profile__image"),f=document.querySelector(".profile__add-card-button"),v=document.querySelector("#card").content,g=".modal__close-btn",S=document.querySelector(".header__reset-btn");function b(e){return new s(e,v,C,D,w,k).getCardElement()}function C(e){T.open({link:e.getCardLink(),altInfo:e.getCardAltInfo(),name:e.getCardName()})}document.querySelector(".header__get-btn");const L=new class{constructor(e){let{userNameSelector:t,userDescriptionSelector:r,userAvatarSelector:s}=e;this._userName=document.querySelector(t),this._userDescription=document.querySelector(r),this._userAvatar=document.querySelector(s)}getUserInfo(){const e={};return e.name=this._userName.textContent,e.description=this._userDescription.textContent,e}getUserAvatar(){return this._currentAvatar}setUserInfo(e){let{name:t,description:r}=e;this._userName.textContent=t,this._userDescription.textContent=r}setUserAvatar(e){this._userAvatar.src=e,this._currentAvatar=e}}({userNameSelector:".profile__title",userDescriptionSelector:".profile__description",userAvatarSelector:".profile__image"}),y=new r({popupSelector:"#edit-profile-modal",popupOpenedClass:l,closeButtonSelector:g},c,(function(e,t,r){r.renderLoading(!0),e.preventDefault();const s={name:`${t[d]}`,description:`${t[u]}`};q.setUserInfo(s).then((e=>{L.setUserInfo(s),y.close()})).catch((e=>{alert(e)})).finally((()=>{setTimeout((()=>{r.renderLoading(!1)}),1e3)}))}));y.setEventListeners(),_.addEventListener("click",(()=>{const e={},{name:t,description:r}=L.getUserInfo();e[d]=t,e[u]=r,y.setInputValues(e),o["edit-profile-form"].resetValidation(),o["edit-profile-form"].disableSubmitButton(),y.open()}));const I=new r({popupSelector:"#edit-profile-url-modal",popupOpenedClass:l,closeButtonSelector:g},c,(function(e,t,r){r.renderLoading(!0),e.preventDefault(),q.setUserAvatar(t[p]).then((e=>{console.log(e),L.setUserAvatar(t[p]),I.close()})).catch((e=>{alert(e)})).finally((()=>{setTimeout((()=>{r.renderLoading(!1)}),1e3)}))}));function w(e){return q.deleteCard(e)}function k(e,t){return q.setCardLike(e,t)}I.setEventListeners(),E.addEventListener("click",(()=>{const e={};e[p]=L.getUserAvatar(),I.setInputValues(e),o["edit-profile-url-form"].resetValidation(),o["edit-profile-url-form"].disableSubmitButton(),I.open()})),S.addEventListener("click",(function(){console.log("Cards delete"),q.deleteAllCards().then((()=>{q.writeCards(i)}))}));const q=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r,console.log(this._baseUrl,this._headers)}_request(e,t,r){return fetch(e,t).then((e=>e.ok?e.json():Promise.reject(`${r} Error number: ${e.status}`)))}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers,method:"GET"},"Error loading cards from server.")}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers,method:"GET"},"Error getting user info from server.")}setUserInfo(e){let{name:t,description:r}=e;return this._request(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:r})},"Error setting user info from server.")}setUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})},"Error updataing user avatar. Possibly you typed in wrong URL.")}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"},"Error deleteng card from server. Try again later.")}writeCard(e){return this._request(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)},"Error posting card to server. Possibly you typed in wrong URL.")}setCardLike(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:t?"PUT":"DELETE"},"Error writing like.")}deleteAllCards(){const e=[];return this.getInitialCards().then((t=>{t.forEach((t=>{e.push(this.deleteCard(t._id))}))})),Promise.all(e)}writeCards(e){const t=[];return e.forEach((e=>{t.push(this.writeCard(e))})),Promise.all(t).then((()=>`Successfully posted ${t.length} cards.`))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"16b2631d-863b-4a4a-821d-14e3c93f8b71","Content-Type":"application/json"}});let A;Promise.all([q.getInitialCards(),q.getUserInfo()]).then((t=>{let[r,s]=t;A=new e({items:r,renderer:e=>{const t=b(e);A.appendItem(t)}},".elements__cards"),A.renderItems(),L.setUserInfo({name:s.name,description:s.about}),L.setUserAvatar(s.avatar)})).catch((e=>{allert(e)}));const U=new r({popupSelector:"#add-card-modal",popupOpenedClass:l,closeButtonSelector:g},c,(function(e,t,r){r.renderLoading(!0),e.preventDefault(),q.writeCard({name:t[h],link:t[m]}).then((e=>{console.log(e);const t=b(e);A.prependItem(t),U.close()})).catch((e=>{alert(e)})).finally((()=>{setTimeout((()=>{r.renderLoading(!1)}),1e3)}))}));U.setEventListeners(),f.addEventListener("click",(()=>{o["add-card-form"].disableSubmitButton(),U.open()}));const B=new class extends t{constructor(e,t,r){super(e),this._submitHandler=r,this._popupForm=this._popupWindow.querySelector(t)}open(e){this._cardToDelete=e,super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{this._submitHandler(e,this._cardToDelete)}))}}({popupSelector:"#confirm-delete-modal",popupOpenedClass:l,closeButtonSelector:g},c,(function(e,t){e.preventDefault(),t.deleteCard().catch((e=>{alert(e)})).finally((()=>{B.close()}))}));function D(e){B.open(e)}B.setEventListeners();const T=new class extends t{constructor(e,t,r){super(e),this._picture=this._popupWindow.querySelector(t),this._caption=this._popupWindow.querySelector(r)}open(e){let{link:t,altInfo:r,name:s}=e;super.open(),this._picture.src=t,this._picture.alt=r,this._caption.textContent=s}}({popupSelector:"#show-pic-modal",popupOpenedClass:l,closeButtonSelector:g},".modal__picture",".modal__picture-caption");var x;T.setEventListeners(),x=a,Array.from(document.querySelectorAll(x.formSelector)).forEach((e=>{const t=new n(a,e),r=e.getAttribute("name");o[r]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,